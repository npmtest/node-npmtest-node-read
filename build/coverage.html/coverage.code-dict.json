{"/home/travis/build/npmtest/node-npmtest-node-read/test.js":"/* istanbul instrument in package npmtest_node_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-read/lib.npmtest_node_read.js":"/* istanbul instrument in package npmtest_node_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_read = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_read = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-read/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-read && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_read */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_read\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_read.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_read.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_read.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_read.__dirname + '/lib.npmtest_node_read.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-read/node_modules/node-read/index.js":"var utils = require('./lib/utils.js');\nvar req = require('fetch').fetchUrl;\nvar url = require('url');\nvar cheerio = require('cheerio');\n\nfunction Article(dom, options, uri) {\n  this.$ = dom; // Will be modified in-place after analyzing\n  this.originalDOM = dom; // Save the original DOM if the user needs it\n  this.cache = {};\n\n  if (uri && typeof uri != \"undefined\") {\n    this.base = uri.protocol + \"//\" + uri.hostname + uri.pathname;\n    if (uri.port && uri.port != 80) this.base += \":\" + uri.port;\n  } else {\n    this.base = false;\n  }\n\n  this.options = options;\n  this.__defineGetter__('content', function() {\n    return this.getContent(true);\n  });\n  this.__defineGetter__('title', function() {\n    return this.getTitle(true);\n  });\n  this.__defineGetter__('html', function() {\n    return this.getHTML(true);\n  });\n  this.__defineGetter__('dom', function() {\n    return this.getDOM(true);\n  });\n}\n\nArticle.prototype.getContent = function() {\n  if (typeof this.cache['article-content'] !== 'undefined') {\n    return this.cache['article-content'];\n  }\n  var content = utils.extract(this.$, this.base, this.options).html();\n\n  return this.cache['article-content'] = content;\n}\n\n// Better Article Title Extraction. \n// Author Zihua Li https://github.com/luin/node-readability\nArticle.prototype.getTitle = function() {\n  if (typeof this.cache['article-title'] !== 'undefined') {\n    return this.cache['article-title'];\n  }\n\n  // Prefer to pull the title from one of the class names known to hold\n  // the article title (Instapaper conventions and\n  // https://www.readability.com/developers/guidelines#publisher).\n  var preferredTitle = this.$('.entry-title, .instapaper_title');\n  if (preferredTitle.length > 0) {\n    return this.cache['article-title'] = preferredTitle.first().text().trim();\n  }\n\n  var title = this.$('title').text();\n  var betterTitle;\n  var commonSeparatingCharacters = [' | ', ' _ ', ' - ', '«', '»', '—'];\n\n  var self = this;\n  commonSeparatingCharacters.forEach(function(char) {\n    var tmpArray = title.split(char);\n    if (tmpArray.length > 1) {\n      if (betterTitle) return self.cache['article-title'] = title;\n      betterTitle = tmpArray[0].trim();\n    }\n  });\n\n  if (betterTitle && betterTitle.length > 10) {\n    return this.cache['article-title'] = betterTitle;\n  }\n\n  return this.cache['article-title'] = title.trim();\n}\n\nArticle.prototype.getDOM = function() {\n  return this.originalDOM;\n}\n\nArticle.prototype.getHTML = function() {\n  return this.$.html();\n}\n\nvar read = module.exports = function(html, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {\n      considerDIVs: true,\n      nodesToRemove: 'meta,iframe,noscript,style,aside,object,script'\n    };\n  }\n\n  if (!html.match(/^\\s*</)) {\n    req(html, options, function(err, res, body) {\n      if (err) {\n        return callback(err);\n      }\n      parseDOM(body.toString(), url.parse(html));\n    });\n  } else {\n    parseDOM(html, null);\n  }\n\n  function parseDOM(html, url) {\n    if (!html) return callback(new Error('Empty html'));\n    var $ = cheerio.load(html, {\n      normalizeWhitespace: true,\n      decodeEntities: false\n    });\n    if ($('body').length < 1) return callback(new Error(\"No body tag was found\"));\n    return callback(null, new Article($, options, url), url);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-read/node_modules/node-read/lib/utils.js":"/*\n * Url module. Required for resolving relative paths.\n */\n\nvar url = require(\"url\");\n\n/*\n * Regexp from origin Arc90 Readability.\n */\n\nvar regexps = {\n  unlikelyCandidatesRe: /combx|pager|comment|disqus|foot|header|menu|meta|nav|rss|shoutbox|sidebar|sponsor|share|bookmark|social|advert|leaderboard|instapaper_ignore|entry-unrelated/i,\n  okMaybeItsACandidateRe: /and|article|body|column|main/i,\n  positiveRe: /article|body|content|entry|hentry|page|pagination|post|text/i,\n  negativeRe: /combx|comment|captcha|contact|foot|footer|footnote|link|media|meta|promo|related|scroll|shoutbox|sponsor|utility|tags|widget|tip|dialog/i,\n  divToPElementsRe: /<(a|blockquote|dl|div|img|ol|p|pre|table|ul)/i,\n  replaceBrsRe: /(<br[^>]*>[ \\n\\r\\t]*){2,}/gi,\n  replaceFontsRe: /<(\\/?)font[^>]*>/gi,\n  trimRe: /^\\s+|\\s+$/g,\n  normalizeRe: /\\s{2,}/g,\n  killBreaksRe: /(<br\\s*\\/?>(\\s|&nbsp;?)*){1,}/g,\n  videoRe: /http:\\/\\/(www\\.)?(youtube|vimeo|youku|tudou|56|yinyuetai)\\.com/i,\n  nextLink: /(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))/i // Will be used to get the next Page of Article\n};\n\n/**\n * Node Types and their classification\n **/\n\nvar nodeTypes = {\n  'mostPositive': ['div'],\n  'positive': ['pre', 'td', 'blockquote'],\n  'negative': ['address', 'ol', 'ul', 'dl', 'dd', 'dt', 'li'],\n  'mostNegative': ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'th']\n};\n\n/**\n * Select the TopCandidate from all possible candidates\n **/\n\nfunction getArticle(candidates, $, options) {\n  var topCandidate = null;\n\n  candidates.forEach(function(elem) {\n    var linkDensity = getLinkDensity(elem, $);\n    var score = elem.data('readabilityScore');\n    var siblings = elem.children('p').length;\n\n    elem.data('readabilityScore', Math.min(2, Math.max(siblings, 1)) * score * (1 - linkDensity));\n    if (!topCandidate || elem.data('readabilityScore') > topCandidate.data('readabilityScore')) {\n      topCandidate = elem;\n    }\n  });\n  /**\n   * If we still have no top candidate, just use the body as a last resort.\n   * Should not happen.\n   **/\n  if (topCandidate === null) {\n    return $('body');\n  }\n\n  // Perhaps the topCandidate is the parent?\n  var parent;\n  if (!(parent = topCandidate.parent()) || parent.length == 0 || topCandidate.children('p').length > 5) {\n    return filterCandidates(topCandidate, topCandidate.children(), $);\n  } else {\n    return filterCandidates(topCandidate, parent.children(), $);\n  }\n}\n\n/**\n * Filter TopCandidate Siblings (Children) based on their Link Density, and readabilityScore\n * Append the nodes to articleContent\n **/\n\nfunction filterCandidates(topCandidate, siblings, $) {\n  var articleContent = $(\"<div id='readabilityArticle'></div>\");\n  var siblingScoreThreshold = Math.max(10, topCandidate.data('readabilityScore') * 0.2);\n\n  siblings.each(function(index, elem) {\n\n    var node = $(this);\n    var append = false;\n    var type = node.get(0).name;\n    var score = node.data('readabilityScore');\n    var children = siblings.contents().length;\n\n    if (node.is(topCandidate) || score > siblingScoreThreshold) {\n      append = true;\n    }\n\n    if (children > 0) {\n      siblings.contents().each(function(index, elem) {\n        if (elem.name == \"img\") append = true;\n      });\n    }\n\n    if (!append && (type == 'p' || type == 'ul' || type == 'blockquote' || type == 'pre' || type == 'h2')) {\n     $(elem).find('a').each(function(index, elems) {\n          if ($(elems).text().length > 1) return;\n          if (elems.name == \"a\") $(elems).remove();\n        });\n      \n      var linkDensity = getLinkDensity(node, $);\n      var len = node.text().length;\n      if (len < 3) return;\n\n      if (len > 80 && linkDensity < 0.25) {\n        append = true;\n      } else if (len < 80 && linkDensity == 0 && node.text().replace(regexps.trimRe, \"\").length > 0) {\n        append = true;\n      }\n\n    }\n    if (append) {\n      articleContent.append(node);\n    }\n  });\n  return articleContent;\n}\n\n/**\n * Traverse all Nodes and remove unlikely Candidates.\n **/\n\nfunction getCandidates($, base, options) {\n\n  // Removing unnecessary nodes\n  $(options.nodesToRemove).remove();\n\n  // Candidates Array\n  var candidates = [];\n\n  // Iterate over all Nodes in body\n  $('*', 'body').each(function(index, element) {\n    var node = $(this);\n\n    // If node is null, return, otherwise Illegal Access Error\n    if (!node || node.length == 0) return;\n    var nodeType = node.get(0).name;\n\n    // Remove Unlikely Candidates\n    var classAndID = (node.attr('class') || \"\") + (node.attr('id') || \"\");\n    if (classAndID.search(regexps.unlikelyCandidatesRe) !== -1 && classAndID.search(regexps.okMaybeItsACandidateRe) == -1) {\n      return node.remove();\n    }\n\n    // Remove Elements that have no children and have no content\n    if (nodeType == \"div\" && node.children().length < 1 && node.text().trim().length < 1) {\n      return node.remove();\n    }\n\n    // Remove Style \n    node.removeAttr('style');\n\n    // turn all divs that don't have children block level elements into p's\n    if (nodeType === \"div\" && options.considerDIVs) {\n      if (node.html().search(regexps.divToPElementsRe) === -1) {\n        node.replaceWith('<p class=\"node-read-div2p\">' + node.html() + '</p>');\n      } else {\n        node.contents().each(function(index, element) {\n          var child = $(this),\n            childEntity;\n          if (!child || !(childEntity = child.get(0))) {\n            return;\n          }\n          if (childEntity.type == 'text' && childEntity.data && childEntity.data.replace(regexps.trimRe, '').length > 1) {\n            child.replaceWith('<p class=\"node-read-div2p\">' + childEntity.data + '</p>');\n          }\n        });\n      }\n    }\n\n    // score paragraphs.\n    if (nodeType == \"p\" || nodeType == \"pre\") {\n      return calculateNodeScore(node, candidates);\n    }\n\n    // Resolve URLs\n    if (base) {\n      if (nodeType == \"img\" && typeof node.attr('src') != \"undefined\") {\n        node.attr('src', url.resolve(base, node.attr('src')));\n      }\n      if (nodeType == \"a\" && typeof node.attr('href') != \"undefined\") {\n        node.attr('href', url.resolve(base, node.attr('href')));\n      }\n    }\n\n    // Clean the headers\n    if ([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"].indexOf(nodeType) !== -1) {\n      var weight = getClassWeight(node, $);\n      var density = getLinkDensity(node, $);\n      if (weight < 0 || density > 0.3) {\n        node.remove();\n      }\n    }\n\n  });\n  // calculate scores of `P`s that were turned from DIV by us.\n  $('p.node-read-div2p', 'body').each(function() {\n    calculateNodeScore($(this), candidates);\n  });\n\n  return candidates;\n}\n\n/**\n * Give a score to each node based on the Content.\n * @param node\n * @param contentScore\n * @param candidates\n */\nfunction scoreCandidate(node, contentScore, candidates) {\n  var score;\n  if (typeof node.data('readabilityScore') == \"undefined\") {\n    score = initializeNode(node);\n    candidates.push(node);\n  } else {\n    score = node.data('readabilityScore') || 0;\n  }\n  node.data('readabilityScore', score + contentScore)\n}\n\n/**\n * calculate score of specified node.\n * @param node\n * @param candidates\n */\nfunction calculateNodeScore(node, candidates) {\n  var txt = node.text();\n  var contentScore = 1;\n\n  // Ignore too small nodes\n  if (txt.length < 25) return;\n\n  // Add points for any commas within this paragraph\n  // support Chinese commas.\n  var commas = txt.match(/[,，.。;；?？、]/g);\n  if (commas && commas.length) {\n    contentScore += commas.length;\n  }\n\n  // For every 100 characters in this paragraph, add another point. Up to 3 points.\n  contentScore += Math.min(Math.floor(txt.length / 100), 3);\n\n  // Initialize Parent and Grandparent\n  // First initialize the parent node with contentScore / 1, then grandParentNode with contentScore / 2\n  var parent = node.parent();\n\n  if (parent && parent.length > 0) {\n    scoreCandidate(parent, contentScore, candidates);\n    var grandParent = parent.parent();\n    if (grandParent && grandParent.length > 0) {\n      scoreCandidate(grandParent, contentScore / 2, candidates);\n    }\n  }\n}\n\n/**\n * Check the type of node, and get its Weight\n **/\n\nfunction initializeNode(node) {\n  if (!node || node.length == 0) return 0;\n  var tag = node.get(0).name;\n  if (nodeTypes['mostPositive'].indexOf(tag) >= 0) return 5 + getClassWeight(node);\n  if (nodeTypes['positive'].indexOf(tag) >= 0) return 3 + getClassWeight(node);\n  if (nodeTypes['negative'].indexOf(tag) >= 0) return -3 + getClassWeight(node);\n  if (nodeTypes['mostNegative'].indexOf(tag) >= 0) return -5 + getClassWeight(node);\n  return -1;\n}\n\n/**\n * Node Weight is calculated based on className and ID of the node.\n **/\n\nfunction getClassWeight(node) {\n  if (node == null || node.length == 0) return 0;\n  var classAndID = (node.attr('class') || \"\") + (node.attr('id') || \"\");\n  var weight = 0;\n\n  if (node.get(0).name == \"article\") weight += 25;\n  if (classAndID.search(regexps.negativeRe) !== -1) weight -= 25;\n  if (classAndID.search(regexps.positiveRe) !== -1) weight += 25;\n\n  return weight;\n}\n\n/**\n * Get Link density of this node.\n * Total length of link text in this node divided by the total text of the node.\n * Relative links are not included.\n **/\n\nfunction getLinkDensity(node, $) {\n  var links = node.find('a');\n  var textLength = node.text().length;\n  var linkLength = 0;\n\n  links.each(function(index, elem) {\n    var href = $(this).attr('href');\n    if (!href || (href.length > 0 && href[0] === '#')) return;\n    linkLength += $(this).text().length;\n  });\n\n  return (linkLength / textLength) || 0;\n}\n\n/**\n * Main method\n * If the first run does not succeed, try the body element;\n **/\n\nmodule.exports.extract = function($, base, options) {\n  var candidates = getCandidates($, base, options);\n  article = getArticle(candidates, $, options);\n  if (article.length < 1) {\n    article = getArticle([$('body')], $, options)\n  }\n  return article;\n}\n"}